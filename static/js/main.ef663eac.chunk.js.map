{"version":3,"sources":["Components/Coin/coin.jsx","Components/CoinList/CoinList.jsx","Components/ExchangeHeader/logo.svg","Components/ExchangeHeader/piggy.svg","Components/ExchangeHeader/ExchangeHeader.jsx","Components/AccountBalance/AccountBalance.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","Coin","props","balance","showBalance","name","ticker","price","action","method","onClick","event","preventDefault","handleRefresh","tickerId","CoinList","className","coinData","map","key","Header","header","H1","h1","Img","img","ExchangeHeader","src","logo","alt","logo1","Component","Section","section","AccountBalance","buttonText","amount","handleToggleShowBalance","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef663eac.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\n/*class MyComponent extends React.Component {\r\n    render() {\r\n      // Attach the passed-in className to the DOM node\r\n      return <div className={this.props.className} />\r\n    }\r\n  }\r\n*/\r\n\r\n\r\n\r\n//const \"coin-row\" = styled.coin-row`\r\n\r\nconst Td = styled.td`\r\n  border: 2px solid #cccccc;\r\n  width: 30vh;\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport default function Coin(props) {\r\n\r\n    const handleClick = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerId);\r\n        } \r\n        \r\n        const balance = props.showBalance ?\r\n            <Td>{props.balance}</Td> : <Td>-</Td>;\r\n\r\n        return (\r\n            \r\n     \r\n        <tr>\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>${props.price}</Td>\r\n            {balance}\r\n            \r\n\r\n            <Td>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handleClick}>Refresh</button>\r\n                </form>\r\n                 \r\n           </Td>\r\n        </tr>       \r\n        ); \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n/*class component \r\nexport default Coin extends Component {\r\n\r\n  handleClick = (event) => {\r\n      // Prevent the default action of submitting the form\r\n      event.preventDefault();\r\n      this.props.handleRefresh(this.props.tickerId);\r\n \r\n\r\n} \r\n\r\n\r\n  render(){\r\n\r\n      const balance = this.props.showBalance ?\r\n          <Td>{this.props.balance}</Td> : <Td>-</Td>;\r\n\r\n      return (\r\n          \r\n   \r\n      <tr>\r\n          <Td>{this.props.name}</Td>\r\n          <Td>{this.props.ticker}</Td>\r\n          <Td>${this.props.price}</Td>\r\n          {balance}\r\n          \r\n\r\n          <Td>\r\n              <form action=\"#\" method=\"POST\">\r\n                  <button onClick={this.handleClick}>Refresh</button>\r\n              </form>\r\n               \r\n         </Td>\r\n      </tr>       \r\n      ); \r\n  }\r\n}\r\n*/\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    balance: PropTypes.number.isRequired\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Coin from '../Coin/coin.jsx'\r\n\r\nexport default function CoinList (props) {\r\n    \r\n        return (\r\n            <table className=\"cointable\">\r\n            <thead className=\"thead-row\">\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Ticker</th>\r\n                <th>Price</th>\r\n                <th>Balance</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead> \r\n            <tbody>\r\n              {\r\n                props.coinData.map( ({key, name,ticker,price, balance}) =>\r\n                  <Coin key={key} \r\n                        handleRefresh={props.handleRefresh}\r\n                        name={name} \r\n                        ticker={ticker} \r\n                        balance={balance}\r\n                        showBalance={props.showBalance}\r\n                        price={price}\r\n                        tickerId={key}\r\n                        />\r\n                )\r\n    \r\n              }\r\n              \r\n            </tbody>\r\n          </table>\r\n        )\r\n    \r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/piggy.e8b3e2a7.svg\";","\r\nimport React, { Component } from 'react';\r\nimport './ExchangeHeader.css';\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\nimport logo1 from './piggy.svg';\r\n\r\n\r\n\r\n\r\n\r\nconst Header = styled.header`\r\n    background-color: #315be3;\r\n    min-height: 10vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: right;\r\n    justify-content: center;\r\n    font-size: 100px;\r\n    color: rgb(255, 255, 255);\r\n\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n\r\n    font-size: 2rem;\r\n\r\n\r\n\r\n`;\r\n\r\n\r\n\r\nconst Img = styled.img`\r\n    height: 10vmin;\r\n    pointer-events: none;\r\n\r\n\r\n\r\n\r\n\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header>\r\n                \r\n             \r\n             <Img src={logo} alt=\"React logo\" />\r\n            \r\n        \r\n      \r\n            \r\n            <H1>\r\n             Coin Marketcap\r\n            </H1>\r\n            \r\n            <Img src={logo1} alt=\"Piggy logo\"/>\r\n            \r\n            </Header>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './AccountBalance.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    \r\n    font-size: 1.5rem;\r\n    color: black;\r\n    background-color: #40;\r\n    padding: 1rem 8rem 1rem 1rem;\r\n    text-align: right;\r\n\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport default function AccountBalance (props) {\r\n\r\n   \r\n        const buttonText = props.showBalance ?  //whether we need to show the balance or not\r\n            'Hide Balance' : 'Show Balance';\r\n\r\n        let balance = props.showBalance ?\r\n            <>Balance: ${props.amount}</>\r\n            : null;\r\n        \r\n        //Or, but you need to change some variables\r\n        /*\r\n        let content = null;\r\n\r\n        if( this.props.showBalance ){\r\n            content = <>Balance: ${this.props.amount}</>\r\n        }\r\n        */\r\n      \r\n\r\n        return (\r\n            <Section>\r\n                {balance}\r\n                <button onClick={props.handleToggleShowBalance}> {buttonText}</button>\r\n            </Section>\r\n        );\r\n    \r\n}\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: propTypes.number.isRequired\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport CoinList from './Components/CoinList/CoinList.jsx';\r\nimport ExchangeHeader from './Components/ExchangeHeader/ExchangeHeader.jsx';\r\nimport AccountBalance from './Components/AccountBalance/AccountBalance.jsx';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nconst COIN_COUNT = 10;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\r\n\r\nfunction App (props) { \r\n  const balance = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(true);\r\n  const [coinData, setCoinData] = useState([]);\r\n\r\n\r\nconst componentDidMount = async () => {\r\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\r\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\r\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\r\n    const coinData = await Promise.all(promises);\r\n    const coinPriceData = coinData.map(function(response) {\r\n      const coin = response.data;\r\n      return {\r\n            key: coin.id,\r\n            name: coin.name,\r\n            ticker: coin.symbol,\r\n            balance: 0,\r\n            price: formatPrice(coin.quotes.USD.price),\r\n           };\r\n          });   \r\n          // retrieve the prices\r\n          setCoinData(coinPriceData);\r\n        };\r\n\r\n\r\n\r\n\r\n      useEffect( function() {\r\n        if (coinData.length === 0) {\r\n            componentDidMount();       \r\n           }\r\n      });\r\n\r\n\r\n\r\n  const handleToggleShowBalance = () => {\r\n      setShowBalance(oldValue => !oldValue);\r\n     }\r\n\r\n  const handleRefresh = async (valueChangeId) => {\r\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\r\n    const response = await axios.get(tickerUrl);\r\n    \r\n    const newPrice = formatPrice(response.data.quotes.USD.price);\r\n    const newCoinData = coinData.map( function(values){  //map method to transform each and every value\r\n      let newValues = {...values};\r\n      if(valueChangeId === values.key) {\r\n       newValues.price = newPrice;\r\n      }\r\n      return newValues;\r\n     });\r\n      \r\n      setCoinData(newCoinData);\r\n    };\r\n      \r\n\r\n\r\n\r\n \r\n    return (\r\n      <div className=\"App\">\r\n            <ExchangeHeader/>\r\n           <AccountBalance \r\n              amount={balance}\r\n              showBalance={showBalance}\r\n              handleToggleShowBalance={handleToggleShowBalance}/>\r\n           <CoinList \r\n              coinData={coinData}\r\n              showBalance={showBalance}\r\n              handleRefresh={handleRefresh}\r\n              />\r\n      </div>\r\n    );\r\n  }\r\n \r\n\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}